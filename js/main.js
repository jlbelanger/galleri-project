import Galleri from '@jlbelanger/galleri';
import Robroy from '@jlbelanger/robroy';

function initRobroy() {
	Robroy({ hideFullScreenButton: true });
}

Galleri.init({
	apiFoldersPath: '/json/folders.json',
	apiImagesPath: '/json/images.json',
	apiPath: '/api.php',

	callbacks: {
		afterCreateFolder: ({ folder }) => {},
		afterCreateImage: ({ image }) => { initRobroy(); },
		afterDeleteFolder: ({ id }) => {},
		afterDeleteImage: ({ id }) => { initRobroy(); },
		afterEditFolder: ({ folder }) => {},
		afterEditImage: ({ image }) => { initRobroy(); },
		afterLoadFolder: ({ folder }) => {},
		afterLoadImage: ({ element }) => {},
		afterLoadImages: ({ images }) => { initRobroy(); },
		afterLogin: () => {},
		afterLogout: () => {},
		afterMakeThumbnail: ({ folderId, image }) => {},
		afterRemoveThumbnail: ({ folderId, image }) => {},
		afterUpdateImage: ({ element, image }) => {},
	},

	enableGrid: true,
	enableRewrites: true,
	folderItemElement: 'li',
	folderSeparator: ' > ',
	imageItemElement: 'figure',

	lang: {
		cancel: 'Cancel',
		close: 'Close',
		confirmDeleteFolder: 'Are you sure you want to delete the folder "%s"?',
		confirmDeleteImage: 'Are you sure you want to delete the image "%s"?',
		createdSuccessfullyImage: 'Image uploaded successfully.',
		createdSuccessfullyFolder: 'Folder created successfully.',
		createFolder: 'Create Folder',
		delete: 'Delete',
		deletedSuccessfullyImage: 'Image deleted successfully.',
		deletedSuccessfullyFolder: 'Folder deleted successfully.',
		deleteFolder: 'Delete Folder',
		dragImagesOrClickHereToUpload: 'Drag images or click here to upload.',
		edit: 'Edit',
		editFolder: 'Edit Folder',
		error: 'Error: ',
		errorFolderDoesNotExist: 'This folder does not exist.',
		errorInvalidUsername: 'Invalid username or password.',
		errorUpdatingThumbnail: 'Error updating thumbnail.',
		errorRemovingThumbnail: 'Error removing thumbnail.',
		errorStatus: 'The server returned a %s error.',
		fieldFolderId: 'ID',
		fieldFolderName: 'Name',
		fieldFolderParent: 'Parent',
		fieldFolderThumbnail: 'Thumbnail',
		fieldImageImages: 'Images',
		fieldImageFilename: 'Filename',
		fieldImageTitle: 'Title',
		fieldImageFolder: 'Folder',
		home: 'Home',
		loading: 'Loading...',
		logIn: 'Log In',
		logOut: 'Log Out',
		makeThumbnail: 'Make Thumbnail',
		nothingToSave: 'Nothing to save.',
		ok: 'OK',
		pluralImageText: 'images',
		removeThumbnail: 'Remove Thumbnail',
		removedSuccessfullyThumbnail: 'Thumbnail removed successfully.',
		save: 'Save',
		singularImageText: 'image',
		submitCreateFolder: 'Create',
		submitEditFolder: 'Save',
		titleCreateFolder: 'Create Folder',
		titleEditFolder: 'Edit Folder',
		titleEditImage: 'Edit Image',
		updatedSuccessfullyImage: 'Image updated successfully.',
		updatedSuccessfullyFolder: 'Folder updated successfully.',
		updatedSuccessfullyThumbnail: 'Thumbnail updated successfully.',
		upload: 'Upload',
		uploadImage: 'Upload Image',
		validationRequired: 'Error: This field is required.',
		view: 'View',
	},

	localStorageKey: 'authenticated',
	metaTitleSeparator: ' | ',

	modifiers: {
		adminBar: ({ element }) => {},
		breadcrumbList: ({ element, folder }) => {},
		breadcrumbItem: ({ element, folder }) => {},
		folderItem: ({ element, folder }) => {},
		folderForm: ({ addField, container, form }) => {},
		folderCreateForm: ({ addField, form }) => {},
		folderEditForm: ({ addField, form }) => {},
		imageCreateForm: ({ addField, form }) => {},
		imageEditForm: ({ addField, container, form }) => {},
		imageItem: ({ element, image }) => {
			element.querySelector('a').setAttribute('data-robroy', true);
		},
		images: ({ images }) => {},
		modal: ({ element }) => {},
		spinner: ({ element }) => {},
		title: ({ element, title }) => {},
		toast: ({ element }) => {},
	},

	pageSize: 8,
	removePointerEventsOnLogin: false,
	selector: '#galleri',
	showAllImages: false,
});
